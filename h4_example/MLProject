name: Effective Model Optimization
#  MLFlow project to create an effective model Hamiltonians with uncertainty analysis.

# You can either use the python_env (easiest on your laptop) or
# conda_env (neccessary for HPC) to specify the environment.
python_env: python_env.yaml
# conda_env: conda.yaml

entry_points:
  main:
    # Run a single cross-validation training step
    parameters:
        state_cutoff: {type: float, default: 10}
        train_rs: {type: str, default: "2.2, 2.8, 3.2, 3.6, 4.0, 4.4"}
        w0: {type: float, default: 0.9}
        parameter0: {type: string, default: "E0,t"}
        parameter1: {type: string, default: "U"}

        # These parameters can be used to make quick training
        # runs for debugging purposes.
        niter_opt: {type: float, default: 1}
        tol_opt: {type: float, default: 1}
        maxfev_opt: {type: float, default: 1}
        nCV_iter: {type: float, default: 1}

    command: "python cross_validation_function.py \
              --state_cutoff {state_cutoff} \
              --train_rs {train_rs} \
              --w0 {w0} \
              --niter_opt {niter_opt} \
              --tol_opt {tol_opt} \
              --maxfev_opt {maxfev_opt} \
              --nCV_iter {nCV_iter} \
              --parameters {parameter0} {parameter1}"
  scan:
    # Run a scan over a parameter space. Launches multiple cross-validation
    # training steps in parallel using the MLFlow main entry point above.
    parameters:
        # Most of the hyperparemter settings are managed in the python script
        # script, scan.py. These parameters control how it launches the training
        # jobs. They can either be local, sycnhronous jobs, or jobs that are
        # launched on a remote cluster using slurm.
        training_backend: {type: str, default: "local"}  # local, slurm

        # If training_backend is slurm, then this is the json  configuration file
        # that is used to configure the slurm job.
        training_backend_config: {type: str, default: none}

    command: "python scan.py \
                --training_backend {training_backend} \
                --training_backend_config {training_backend_config}"
